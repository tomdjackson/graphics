vec3 colourBuffer[SCREEN_HEIGHT][SCREEN_WIDTH];
const vec2 invScreen(1.0f / SCREEN_WIDTH, 1.0f / SCREEN_HEIGHT);
const float edgeMin = 1.f / 8.f;
const float edgeMax = 1.f / 128.f;
const float gradScale = 2.5f;
const float fxaaConst = 1.f / 6.f;
const vec3 luma(0.299f, 0.587f, 0.114f);

vec3 GetFromBuffer(vec2 point) {
    return GetFromBuffer(point.x, point.y);
}

vec3 GetFromBuffer(float x, float y) {
    int width_ = SCREEN_WIDTH - 1;
    int height_ = SCREEN_HEIGHT - 1;

    int x_ = clamp((int) (clamp(x, 0.f, 1.f) * width_), 0, width_);
    int y_ = clamp((int) (clamp(y, 0.f, 1.f) * height_), 0, height_);

    return colourBuffer[y_][x_];
}

vec3 FXAA(int x, int y) {
    vec2 point(((float) x / (float) SCREEN_WIDTH), ((float) y / (float) SCREEN_HEIGHT));

    vec3 centre = GetFromBuffer(point);
    vec3 NW = GetFromBuffer(point.x - invScreen.x, point.y - invScreen.y);
    vec3 NE = GetFromBuffer(point.x + invScreen.x, point.y - invScreen.y);
    vec3 SW = GetFromBuffer(point.x - invScreen.x, point.y + invScreen.y);
    vec3 SE = GetFromBuffer(point.x + invScreen.x, point.y + invScreen.y);

    float lumaCentre = glm::dot(centre, luma);
    float lumaNW = glm::dot(NW, luma);
    float lumaNE = glm::dot(NE, luma);
    float lumaSW = glm::dot(SW, luma);
    float lumaSE = glm::dot(SE, luma);

    float lumaMin = glm::min(lumaCentre, glm::min(lumaNW, glm::min(lumaNE, glm::min(lumaSW, lumaSE))));
    float lumaMax = glm::max(lumaCentre, glm::max(lumaNW, glm::max(lumaNE, glm::max(lumaSW, lumaSE))));

    float lumaNorthEdge = lumaNW + lumaNE;
    float lumaSouthEdge = lumaSW + lumaSE;
    float lumaWestEdge = lumaNW + lumaSW;
    float lumaEastEdge = lumaNE + lumaSE;

    vec2 grad(-(lumaNorthEdge - lumaSouthEdge), (lumaWestEdge - lumaEastEdge));
    float temp = (lumaNW + lumaNE + lumaSW + lumaSE) * edgeMax * 0.25;
    float gradThreshold = glm::max(temp, edgeMin);
    float gradMin = 1.f / (glm::min(abs(grad.x), abs(grad.y)) + gradThreshold);

    float gradX = glm::min(gradScale, glm::max(-gradScale, grad.x * gradMin)) * invScreen.x;
    float gradY = glm::min(gradScale, glm::max(-gradScale, grad.y * gradMin)) * invScreen.y;

    grad = vec2(gradX, gradY);

    vec3 A = 0.5f * (GetFromBuffer(point + (-fxaaConst * grad)) + GetFromBuffer(point + (fxaaConst * grad)));
    vec3 B = 0.5f * A + 0.25f * (GetFromBuffer(point + (-0.5f * grad)) + GetFromBuffer(point + (0.5f * grad)));

    float lumaB = glm::dot(B, luma);

    if (lumaB < lumaMin || lumaB > lumaMax) {
        return A;
    } else {
        return B;
    }
}